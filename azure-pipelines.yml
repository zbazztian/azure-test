# https://aka.ms/yaml

trigger:
  branches:
    include: [main]

pool:
  vmImage: ubuntu-latest

steps:

- script: |
    wget https://github.com/github/codeql-action/releases/latest/download/codeql-bundle-linux64.tar.gz -O ../codeql-bundle-linux64.tar.gz
    tar xzvf ../codeql-bundle-linux64.tar.gz -C ../
    rm ../codeql-bundle-linux64.tar.gz
    export PATH=$(cd ..; pwd)/codeql:$PATH
    codeql version
  displayName: 'Install CodeQL'

- script: |
    ls -l ./
    echo '-------------------------------'
    ls -l ../
    codeql \
      database create \
      --command ./compile \
      --language java \
      --github-url=https://github.com/ \
      --source-root . \
      ../db
  displayName: Extract Code

#        # Create CodeQL Database
#        # Create a CodeQL database for a source tree that can be analyzed using one of the CodeQL products.
#        # Note that if the --command flag is omitted for compiled languages, the AutoBuilder will be used. For complex build instructions, consider placing build commands inside a script
#        # and pass that to --command, or use indirect build tracing (aka. "sandwich mode").
#        # Full documentation for database create step: https://codeql.github.com/docs/codeql-cli/manual/database-create/
#        - task: ShellScript@2
#            displayName: Create CodeQL Database
#            inputs:
#                script: "codeql database create --language=javascript --github-auth-stdin --github-url=https://github.com/ --source-root /checkouts/my-repo db"
#
#        # Analyze CodeQL Database
#        # Analyze a CodeQL database, producing meaningful results in the context of the source code.
#        # Run a query suite (or some individual queries) against a CodeQL database, producing results, styled as alerts or paths, in SARIF or another interpreted format.
#        # Note that the suite argument can accept one of the pre-compiled, out-of-the-box query suites: code-scanning, security-extended, or security-and-quality
#        # Full documentation for database analyze step: https://codeql.github.com/docs/codeql-cli/manual/database-analyze/
#        - task: ShellScript@3
#            displayName: Analyze CodeQL Database
#            inputs:
#                script: "codeql database analyze --format=sarif-latest --output=./temp/results-js.sarif db javascript-security-and-quality.qls"
#
#        # Upload results to GitHub
#        # Uploads a SARIF file to GitHub code scanning.
#        # For context, please see https://docs.github.com/en/rest/reference/code-scanning#upload-an-analysis-as-sarif-data
#        # A GitHub Apps token or personal access token must be set. For best security practices, it is recommended to set the --github-auth-stdin flag and pass the token to the command through standard input. Alternatively, the GITHUB\_TOKEN environment variable can be set.
#        # This token must have the security\_events scope.
#        # Documentation for creating GitHub Apps or Personal Access Tokens are available here: https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token
#        # Full documentation for github upload-results step: https://codeql.github.com/docs/codeql-cli/manual/github-upload-results/
#        - task: ShellScript@4
#            displayName: Upload results to GitHub
#            inputs:
#                script: "codeql github upload-results --sarif=./temp/results-js.sarif --github-auth-stdin --github-url=https://github.com/ --repository=octo-org/example-repo-2 --ref=refs/heads/main --commit=deb275d2d5fe9a522a0b7bd8b6b6a1c939552718"
#
#        # Other tasks go here
#
